/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMediumArgs } from "./CreateMediumArgs";
import { UpdateMediumArgs } from "./UpdateMediumArgs";
import { DeleteMediumArgs } from "./DeleteMediumArgs";
import { MediumFindManyArgs } from "./MediumFindManyArgs";
import { MediumFindUniqueArgs } from "./MediumFindUniqueArgs";
import { Medium } from "./Medium";
import { Project } from "../../project/base/Project";
import { MediumService } from "../medium.service";

@graphql.Resolver(() => Medium)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class MediumResolverBase {
  constructor(
    protected readonly service: MediumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Medium",
    action: "read",
    possession: "any",
  })
  async _mediumsMeta(
    @graphql.Args() args: MediumFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Medium])
  @nestAccessControl.UseRoles({
    resource: "Medium",
    action: "read",
    possession: "any",
  })
  async mediums(@graphql.Args() args: MediumFindManyArgs): Promise<Medium[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Medium, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Medium",
    action: "read",
    possession: "own",
  })
  async medium(
    @graphql.Args() args: MediumFindUniqueArgs
  ): Promise<Medium | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Medium)
  @nestAccessControl.UseRoles({
    resource: "Medium",
    action: "create",
    possession: "any",
  })
  async createMedium(@graphql.Args() args: CreateMediumArgs): Promise<Medium> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        project: {
          connect: args.data.project,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Medium)
  @nestAccessControl.UseRoles({
    resource: "Medium",
    action: "update",
    possession: "any",
  })
  async updateMedium(
    @graphql.Args() args: UpdateMediumArgs
  ): Promise<Medium | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          project: {
            connect: args.data.project,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Medium)
  @nestAccessControl.UseRoles({
    resource: "Medium",
    action: "delete",
    possession: "any",
  })
  async deleteMedium(
    @graphql.Args() args: DeleteMediumArgs
  ): Promise<Medium | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Project, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async project(@graphql.Parent() parent: Medium): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
