/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProjectHasCountyArgs } from "./CreateProjectHasCountyArgs";
import { UpdateProjectHasCountyArgs } from "./UpdateProjectHasCountyArgs";
import { DeleteProjectHasCountyArgs } from "./DeleteProjectHasCountyArgs";
import { ProjectHasCountyFindManyArgs } from "./ProjectHasCountyFindManyArgs";
import { ProjectHasCountyFindUniqueArgs } from "./ProjectHasCountyFindUniqueArgs";
import { ProjectHasCounty } from "./ProjectHasCounty";
import { County } from "../../county/base/County";
import { Project } from "../../project/base/Project";
import { ProjectHasCountyService } from "../projectHasCounty.service";

@graphql.Resolver(() => ProjectHasCounty)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ProjectHasCountyResolverBase {
  constructor(
    protected readonly service: ProjectHasCountyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasCounty",
    action: "read",
    possession: "any",
  })
  async _projectHasCountiesMeta(
    @graphql.Args() args: ProjectHasCountyFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProjectHasCounty])
  @nestAccessControl.UseRoles({
    resource: "ProjectHasCounty",
    action: "read",
    possession: "any",
  })
  async projectHasCounties(
    @graphql.Args() args: ProjectHasCountyFindManyArgs
  ): Promise<ProjectHasCounty[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProjectHasCounty, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProjectHasCounty",
    action: "read",
    possession: "own",
  })
  async projectHasCounty(
    @graphql.Args() args: ProjectHasCountyFindUniqueArgs
  ): Promise<ProjectHasCounty | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProjectHasCounty)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasCounty",
    action: "create",
    possession: "any",
  })
  async createProjectHasCounty(
    @graphql.Args() args: CreateProjectHasCountyArgs
  ): Promise<ProjectHasCounty> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        county: {
          connect: args.data.county,
        },

        project: {
          connect: args.data.project,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProjectHasCounty)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasCounty",
    action: "update",
    possession: "any",
  })
  async updateProjectHasCounty(
    @graphql.Args() args: UpdateProjectHasCountyArgs
  ): Promise<ProjectHasCounty | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          county: {
            connect: args.data.county,
          },

          project: {
            connect: args.data.project,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProjectHasCounty)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasCounty",
    action: "delete",
    possession: "any",
  })
  async deleteProjectHasCounty(
    @graphql.Args() args: DeleteProjectHasCountyArgs
  ): Promise<ProjectHasCounty | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => County, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "County",
    action: "read",
    possession: "any",
  })
  async county(
    @graphql.Parent() parent: ProjectHasCounty
  ): Promise<County | null> {
    const result = await this.service.getCounty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Project, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async project(
    @graphql.Parent() parent: ProjectHasCounty
  ): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
