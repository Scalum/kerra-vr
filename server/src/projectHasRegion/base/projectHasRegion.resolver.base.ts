/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProjectHasRegionArgs } from "./CreateProjectHasRegionArgs";
import { UpdateProjectHasRegionArgs } from "./UpdateProjectHasRegionArgs";
import { DeleteProjectHasRegionArgs } from "./DeleteProjectHasRegionArgs";
import { ProjectHasRegionFindManyArgs } from "./ProjectHasRegionFindManyArgs";
import { ProjectHasRegionFindUniqueArgs } from "./ProjectHasRegionFindUniqueArgs";
import { ProjectHasRegion } from "./ProjectHasRegion";
import { Project } from "../../project/base/Project";
import { Region } from "../../region/base/Region";
import { ProjectHasRegionService } from "../projectHasRegion.service";

@graphql.Resolver(() => ProjectHasRegion)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ProjectHasRegionResolverBase {
  constructor(
    protected readonly service: ProjectHasRegionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasRegion",
    action: "read",
    possession: "any",
  })
  async _projectHasRegionsMeta(
    @graphql.Args() args: ProjectHasRegionFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProjectHasRegion])
  @nestAccessControl.UseRoles({
    resource: "ProjectHasRegion",
    action: "read",
    possession: "any",
  })
  async projectHasRegions(
    @graphql.Args() args: ProjectHasRegionFindManyArgs
  ): Promise<ProjectHasRegion[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProjectHasRegion, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProjectHasRegion",
    action: "read",
    possession: "own",
  })
  async projectHasRegion(
    @graphql.Args() args: ProjectHasRegionFindUniqueArgs
  ): Promise<ProjectHasRegion | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProjectHasRegion)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasRegion",
    action: "create",
    possession: "any",
  })
  async createProjectHasRegion(
    @graphql.Args() args: CreateProjectHasRegionArgs
  ): Promise<ProjectHasRegion> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,

        region: args.data.region
          ? {
              connect: args.data.region,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProjectHasRegion)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasRegion",
    action: "update",
    possession: "any",
  })
  async updateProjectHasRegion(
    @graphql.Args() args: UpdateProjectHasRegionArgs
  ): Promise<ProjectHasRegion | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,

          region: args.data.region
            ? {
                connect: args.data.region,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProjectHasRegion)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasRegion",
    action: "delete",
    possession: "any",
  })
  async deleteProjectHasRegion(
    @graphql.Args() args: DeleteProjectHasRegionArgs
  ): Promise<ProjectHasRegion | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Project, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async project(
    @graphql.Parent() parent: ProjectHasRegion
  ): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Region, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Region",
    action: "read",
    possession: "any",
  })
  async region(
    @graphql.Parent() parent: ProjectHasRegion
  ): Promise<Region | null> {
    const result = await this.service.getRegion(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
