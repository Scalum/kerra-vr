/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateRegionArgs } from "./CreateRegionArgs";
import { UpdateRegionArgs } from "./UpdateRegionArgs";
import { DeleteRegionArgs } from "./DeleteRegionArgs";
import { RegionFindManyArgs } from "./RegionFindManyArgs";
import { RegionFindUniqueArgs } from "./RegionFindUniqueArgs";
import { Region } from "./Region";
import { CountyFindManyArgs } from "../../county/base/CountyFindManyArgs";
import { County } from "../../county/base/County";
import { Project } from "../../project/base/Project";
import { RegionService } from "../region.service";

@graphql.Resolver(() => Region)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class RegionResolverBase {
  constructor(
    protected readonly service: RegionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Region",
    action: "read",
    possession: "any",
  })
  async _regionsMeta(
    @graphql.Args() args: RegionFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Region])
  @nestAccessControl.UseRoles({
    resource: "Region",
    action: "read",
    possession: "any",
  })
  async regions(@graphql.Args() args: RegionFindManyArgs): Promise<Region[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Region, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Region",
    action: "read",
    possession: "own",
  })
  async region(
    @graphql.Args() args: RegionFindUniqueArgs
  ): Promise<Region | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Region)
  @nestAccessControl.UseRoles({
    resource: "Region",
    action: "create",
    possession: "any",
  })
  async createRegion(@graphql.Args() args: CreateRegionArgs): Promise<Region> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Region)
  @nestAccessControl.UseRoles({
    resource: "Region",
    action: "update",
    possession: "any",
  })
  async updateRegion(
    @graphql.Args() args: UpdateRegionArgs
  ): Promise<Region | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Region)
  @nestAccessControl.UseRoles({
    resource: "Region",
    action: "delete",
    possession: "any",
  })
  async deleteRegion(
    @graphql.Args() args: DeleteRegionArgs
  ): Promise<Region | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [County])
  @nestAccessControl.UseRoles({
    resource: "County",
    action: "read",
    possession: "any",
  })
  async counties(
    @graphql.Parent() parent: Region,
    @graphql.Args() args: CountyFindManyArgs
  ): Promise<County[]> {
    const results = await this.service.findCounties(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Project, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async project(@graphql.Parent() parent: Region): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
