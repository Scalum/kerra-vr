/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProjectHasConstituencyArgs } from "./CreateProjectHasConstituencyArgs";
import { UpdateProjectHasConstituencyArgs } from "./UpdateProjectHasConstituencyArgs";
import { DeleteProjectHasConstituencyArgs } from "./DeleteProjectHasConstituencyArgs";
import { ProjectHasConstituencyFindManyArgs } from "./ProjectHasConstituencyFindManyArgs";
import { ProjectHasConstituencyFindUniqueArgs } from "./ProjectHasConstituencyFindUniqueArgs";
import { ProjectHasConstituency } from "./ProjectHasConstituency";
import { Constituency } from "../../constituency/base/Constituency";
import { Project } from "../../project/base/Project";
import { ProjectHasConstituencyService } from "../projectHasConstituency.service";

@graphql.Resolver(() => ProjectHasConstituency)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ProjectHasConstituencyResolverBase {
  constructor(
    protected readonly service: ProjectHasConstituencyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasConstituency",
    action: "read",
    possession: "any",
  })
  async _projectHasConstituenciesMeta(
    @graphql.Args() args: ProjectHasConstituencyFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProjectHasConstituency])
  @nestAccessControl.UseRoles({
    resource: "ProjectHasConstituency",
    action: "read",
    possession: "any",
  })
  async projectHasConstituencies(
    @graphql.Args() args: ProjectHasConstituencyFindManyArgs
  ): Promise<ProjectHasConstituency[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProjectHasConstituency, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProjectHasConstituency",
    action: "read",
    possession: "own",
  })
  async projectHasConstituency(
    @graphql.Args() args: ProjectHasConstituencyFindUniqueArgs
  ): Promise<ProjectHasConstituency | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProjectHasConstituency)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasConstituency",
    action: "create",
    possession: "any",
  })
  async createProjectHasConstituency(
    @graphql.Args() args: CreateProjectHasConstituencyArgs
  ): Promise<ProjectHasConstituency> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        constituency: {
          connect: args.data.constituency,
        },

        project: {
          connect: args.data.project,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProjectHasConstituency)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasConstituency",
    action: "update",
    possession: "any",
  })
  async updateProjectHasConstituency(
    @graphql.Args() args: UpdateProjectHasConstituencyArgs
  ): Promise<ProjectHasConstituency | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          constituency: {
            connect: args.data.constituency,
          },

          project: {
            connect: args.data.project,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProjectHasConstituency)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasConstituency",
    action: "delete",
    possession: "any",
  })
  async deleteProjectHasConstituency(
    @graphql.Args() args: DeleteProjectHasConstituencyArgs
  ): Promise<ProjectHasConstituency | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Constituency, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Constituency",
    action: "read",
    possession: "any",
  })
  async constituency(
    @graphql.Parent() parent: ProjectHasConstituency
  ): Promise<Constituency | null> {
    const result = await this.service.getConstituency(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Project, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async project(
    @graphql.Parent() parent: ProjectHasConstituency
  ): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
