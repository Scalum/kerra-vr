/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProjectService } from "../project.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProjectCreateInput } from "./ProjectCreateInput";
import { ProjectWhereInput } from "./ProjectWhereInput";
import { ProjectWhereUniqueInput } from "./ProjectWhereUniqueInput";
import { ProjectFindManyArgs } from "./ProjectFindManyArgs";
import { ProjectUpdateInput } from "./ProjectUpdateInput";
import { Project } from "./Project";
import { ConstituencyFindManyArgs } from "../../constituency/base/ConstituencyFindManyArgs";
import { Constituency } from "../../constituency/base/Constituency";
import { ConstituencyWhereUniqueInput } from "../../constituency/base/ConstituencyWhereUniqueInput";
import { CountyFindManyArgs } from "../../county/base/CountyFindManyArgs";
import { County } from "../../county/base/County";
import { CountyWhereUniqueInput } from "../../county/base/CountyWhereUniqueInput";
import { MediumFindManyArgs } from "../../medium/base/MediumFindManyArgs";
import { Medium } from "../../medium/base/Medium";
import { MediumWhereUniqueInput } from "../../medium/base/MediumWhereUniqueInput";
import { RegionFindManyArgs } from "../../region/base/RegionFindManyArgs";
import { Region } from "../../region/base/Region";
import { RegionWhereUniqueInput } from "../../region/base/RegionWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProjectControllerBase {
  constructor(
    protected readonly service: ProjectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Project })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: ProjectCreateInput): Promise<Project> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [Project] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(ProjectFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Project[]> {
    const args = plainToClass(ProjectFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Project })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: ProjectWhereUniqueInput
  ): Promise<Project | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Project })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() data: ProjectUpdateInput
  ): Promise<Project | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Project })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: ProjectWhereUniqueInput
  ): Promise<Project | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Constituency",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/constituencies")
  @ApiNestedQuery(ConstituencyFindManyArgs)
  async findManyConstituencies(
    @common.Req() request: Request,
    @common.Param() params: ProjectWhereUniqueInput
  ): Promise<Constituency[]> {
    const query = plainToClass(ConstituencyFindManyArgs, request.query);
    const results = await this.service.findConstituencies(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/constituencies")
  async connectConstituencies(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: ConstituencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      constituencies: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/constituencies")
  async updateConstituencies(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: ConstituencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      constituencies: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/constituencies")
  async disconnectConstituencies(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: ConstituencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      constituencies: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "County",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/counties")
  @ApiNestedQuery(CountyFindManyArgs)
  async findManyCounties(
    @common.Req() request: Request,
    @common.Param() params: ProjectWhereUniqueInput
  ): Promise<County[]> {
    const query = plainToClass(CountyFindManyArgs, request.query);
    const results = await this.service.findCounties(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        id: true,
        name: true,

        project: {
          select: {
            id: true,
          },
        },

        region: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/counties")
  async connectCounties(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: CountyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      counties: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/counties")
  async updateCounties(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: CountyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      counties: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/counties")
  async disconnectCounties(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: CountyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      counties: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Medium",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/mediums")
  @ApiNestedQuery(MediumFindManyArgs)
  async findManyMediums(
    @common.Req() request: Request,
    @common.Param() params: ProjectWhereUniqueInput
  ): Promise<Medium[]> {
    const query = plainToClass(MediumFindManyArgs, request.query);
    const results = await this.service.findMediums(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/mediums")
  async connectMediums(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: MediumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediums: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/mediums")
  async updateMediums(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: MediumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediums: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/mediums")
  async disconnectMediums(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: MediumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediums: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Region",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/regions")
  @ApiNestedQuery(RegionFindManyArgs)
  async findManyRegions(
    @common.Req() request: Request,
    @common.Param() params: ProjectWhereUniqueInput
  ): Promise<Region[]> {
    const query = plainToClass(RegionFindManyArgs, request.query);
    const results = await this.service.findRegions(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/regions")
  async connectRegions(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: RegionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      regions: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/regions")
  async updateRegions(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: RegionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      regions: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/regions")
  async disconnectRegions(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: RegionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      regions: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
