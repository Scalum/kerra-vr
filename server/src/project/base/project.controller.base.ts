/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProjectService } from "../project.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProjectCreateInput } from "./ProjectCreateInput";
import { ProjectWhereInput } from "./ProjectWhereInput";
import { ProjectWhereUniqueInput } from "./ProjectWhereUniqueInput";
import { ProjectFindManyArgs } from "./ProjectFindManyArgs";
import { ProjectUpdateInput } from "./ProjectUpdateInput";
import { Project } from "./Project";
import { MediumFindManyArgs } from "../../medium/base/MediumFindManyArgs";
import { Medium } from "../../medium/base/Medium";
import { MediumWhereUniqueInput } from "../../medium/base/MediumWhereUniqueInput";
import { ProjectHasConstituencyFindManyArgs } from "../../projectHasConstituency/base/ProjectHasConstituencyFindManyArgs";
import { ProjectHasConstituency } from "../../projectHasConstituency/base/ProjectHasConstituency";
import { ProjectHasConstituencyWhereUniqueInput } from "../../projectHasConstituency/base/ProjectHasConstituencyWhereUniqueInput";
import { ProjectHasCountyFindManyArgs } from "../../projectHasCounty/base/ProjectHasCountyFindManyArgs";
import { ProjectHasCounty } from "../../projectHasCounty/base/ProjectHasCounty";
import { ProjectHasCountyWhereUniqueInput } from "../../projectHasCounty/base/ProjectHasCountyWhereUniqueInput";
import { ProjectHasRegionFindManyArgs } from "../../projectHasRegion/base/ProjectHasRegionFindManyArgs";
import { ProjectHasRegion } from "../../projectHasRegion/base/ProjectHasRegion";
import { ProjectHasRegionWhereUniqueInput } from "../../projectHasRegion/base/ProjectHasRegionWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProjectControllerBase {
  constructor(
    protected readonly service: ProjectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Project })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: ProjectCreateInput): Promise<Project> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [Project] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(ProjectFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Project[]> {
    const args = plainToClass(ProjectFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Project })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: ProjectWhereUniqueInput
  ): Promise<Project | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Project })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() data: ProjectUpdateInput
  ): Promise<Project | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Project })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: ProjectWhereUniqueInput
  ): Promise<Project | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Medium",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/mediums")
  @ApiNestedQuery(MediumFindManyArgs)
  async findManyMediums(
    @common.Req() request: Request,
    @common.Param() params: ProjectWhereUniqueInput
  ): Promise<Medium[]> {
    const query = plainToClass(MediumFindManyArgs, request.query);
    const results = await this.service.findMediums(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/mediums")
  async connectMediums(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: MediumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediums: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/mediums")
  async updateMediums(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: MediumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediums: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/mediums")
  async disconnectMediums(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: MediumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediums: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasConstituency",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/projectHasConstituencies")
  @ApiNestedQuery(ProjectHasConstituencyFindManyArgs)
  async findManyProjectHasConstituencies(
    @common.Req() request: Request,
    @common.Param() params: ProjectWhereUniqueInput
  ): Promise<ProjectHasConstituency[]> {
    const query = plainToClass(
      ProjectHasConstituencyFindManyArgs,
      request.query
    );
    const results = await this.service.findProjectHasConstituencies(params.id, {
      ...query,
      select: {
        constituency: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/projectHasConstituencies")
  async connectProjectHasConstituencies(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: ProjectHasConstituencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectHasConstituencies: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/projectHasConstituencies")
  async updateProjectHasConstituencies(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: ProjectHasConstituencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectHasConstituencies: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/projectHasConstituencies")
  async disconnectProjectHasConstituencies(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: ProjectHasConstituencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectHasConstituencies: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasCounty",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/projectHasCounties")
  @ApiNestedQuery(ProjectHasCountyFindManyArgs)
  async findManyProjectHasCounties(
    @common.Req() request: Request,
    @common.Param() params: ProjectWhereUniqueInput
  ): Promise<ProjectHasCounty[]> {
    const query = plainToClass(ProjectHasCountyFindManyArgs, request.query);
    const results = await this.service.findProjectHasCounties(params.id, {
      ...query,
      select: {
        county: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/projectHasCounties")
  async connectProjectHasCounties(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: ProjectHasCountyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectHasCounties: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/projectHasCounties")
  async updateProjectHasCounties(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: ProjectHasCountyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectHasCounties: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/projectHasCounties")
  async disconnectProjectHasCounties(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: ProjectHasCountyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectHasCounties: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ProjectHasRegion",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/projectHasRegions")
  @ApiNestedQuery(ProjectHasRegionFindManyArgs)
  async findManyProjectHasRegions(
    @common.Req() request: Request,
    @common.Param() params: ProjectWhereUniqueInput
  ): Promise<ProjectHasRegion[]> {
    const query = plainToClass(ProjectHasRegionFindManyArgs, request.query);
    const results = await this.service.findProjectHasRegions(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        region: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/projectHasRegions")
  async connectProjectHasRegions(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: ProjectHasRegionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectHasRegions: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/projectHasRegions")
  async updateProjectHasRegions(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: ProjectHasRegionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectHasRegions: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/projectHasRegions")
  async disconnectProjectHasRegions(
    @common.Param() params: ProjectWhereUniqueInput,
    @common.Body() body: ProjectHasRegionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectHasRegions: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
